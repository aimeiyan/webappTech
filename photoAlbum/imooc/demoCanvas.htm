<!DOCTYPE html>
<html>
<head>
    <title>Gallery</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="zepto.min.js"></script>
    <link href="animate.css" rel="stylesheet" type="text/css">
    <style>
        blockquote, body, button, dd, dl, dt, fieldset, form, h1, h2, h3, h4, h5, h6, hr, input, legend, li, ol, p, pre, td, textarea, th, ul, img {
            margin: 0;
            padding: 0;
        }

        body {
            background: black;
            /*overflow: hidden*/
        }

        ul {
            list-style: none
        }

        .clearfix:after {
            display: block;
            content: "\20";
            height: 0;
            clear: both;
            overflow: hidden;
            visibility: hidden;
        }

        /*ie8����*/

        .img-container li img {
        }

        .img-container li {
            overflow: hidden;
            float: left;
        }

        .large {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            background-color: black;
        }
    </style>
<body>
<ul class="img-container clearfix" id="container">

</ul>
<div class="large animated fadeInDown" id="large_container" style="display:none">
    <img id="large_img" src="">
</div>
<script>
    var total = 32;   //定义图片的总数是17
    var zWin = $(window);   //定义显示窗口的宽度为设备的宽度
    var render = function () {    //将图片渲染到屏幕中
        var padding = 2;    //设置padding值
        var scrollBarWidth = 0;
        var winWidth = zWin.width();
        var picWidth = Math.floor((winWidth - padding * 3 - scrollBarWidth) / 4);
//        var picWidth = Math.floor((winWidth - padding * 3) / 4);
        var tmpl = '';   //最好给变量一个空值，如果只是var tmpl;这样定义，那么最开始tmpl是undefined。

        for (var i = 1; i <= total; i++) {
            var p = padding;
            var imgSrc = 'img/' + i + '.jpg';
            if (i % 4 == 1) {   //一行4张图，每行的第一张图是没有左侧padding的
                p = 0;
            }

            //用canvas代替image可以触发物理设备的GPU渲染
            tmpl += '<li data-id="' + i + '" class="animated bounceIn" style="width:' + picWidth + 'px;height:' + picWidth + 'px;padding-left:' + p + 'px;padding-top:' + padding + 'px;"><canvas id="cvs_' + i + '"></canvas></li>';
//            tmpl += '<li data-id="' + i + '" class="animated bounceIn" style="width:' + picWidth + 'px;height:' + picWidth + 'px;padding-left:' + p + 'px;padding-top:' + padding + 'px;"><img src="'+imgSrc+'"></li>';

            var imgObj = new Image();
            imgObj.index = i;
            imgObj.onload = function () {
                var cvs = $('#cvs_' + this.index)[0].getContext('2d');
                cvs.width = this.width;
                cvs.height = this.height;
                cvs.drawImage(this, 0, 0, picWidth, picWidth);
            };

            imgObj.src = imgSrc;
        }
        $('#container').html(tmpl);
    };

    render();

    var loadImg = function (id, callback) {

        $('#container').css({height: zWin.height(), 'overflow': 'hidden'})

        $('#large_container').css({
            width: zWin.width(),
            height: zWin.height()
//            top: $(window).scrollTop()
        }).show();

        var imgsrc = 'img/' + id + '.large.jpg';

        var ImageObj = new Image();

        ImageObj.onload = function () {
            var w = this.width;
            var h = this.height;
            var winWidth = zWin.width();
            var winHeight = zWin.height();

            //当图片高／宽大于1.2
            //这里有一个比例平衡关系：显示实际宽度／屏幕的高度＝图片本身宽度／图片本身高度，
            //已知屏幕的宽度、图片本省的宽度、图片本身的高度，求图片显示的宽度。
            var realw = winHeight * w / h;
            var paddingLeft = parseInt((winWidth - realw) / 2);

            //除了 图片高／宽大于1.2 的其他情况
            //这里有一个比例平衡关系：显示实际宽度／屏幕的高度＝图片本身宽度／图片本身高度，
            //已知屏幕的高度、图片本省的宽度、图片本身的高度，求图片显示的高度。
            var realh = winWidth * h / w;
            var paddingTop = parseInt((winHeight - realh) / 2);
//
//            var realw = parseInt((winWidth - winHeight * w / h) / 2);
//            var realh = parseInt((winHeight - winWidth * h / w) / 2);

            //解决横图和竖图切换的bug，让之前设置的宽高padding重置
            wImage.css('width', 'auto').css('height', 'auto');
            wImage.css('padding-left', '0px').css('padding-top', '0px');

            if (h / w > 1.2) {
                wImage.attr('src', imgsrc).css('height', winHeight).css('padding-left', paddingLeft);

            } else {
                wImage.attr('src', imgsrc).css('width', winWidth).css('padding-top', paddingTop);
            }

            callback && callback();      //在点击小图转为大图的时候，不需要传入callback，此处的写法就是为不传入callback而设置的兼容性处理方法
        };

        ImageObj.src = imgsrc;
    };

    var cid;
    var wImage = $('#large_img');
    var domImage = wImage[0];
    $('#container').delegate('li', 'tap', function () {
        var _id = cid = $(this).attr('data-id');
        loadImg(_id);
    });

    $('#large_container').tap(function () {
        $('#container').css({height: 'auto', 'overflow': 'auto'});
        $('#large_container').hide();
    }).swipeLeft(function () {
        cid++;
        if (cid > total) {
            cid = total;
        } else {
            loadImg(cid, function () {
                function removeAnimation() {
                    wImage.removeClass("animated bounceInRight");
//                    domImage.removeEventListener('webkitAnimationEnd',function(){});
                }

                domImage.addEventListener("webkitAnimationEnd", removeAnimation, false);
                wImage.addClass('animated bounceInRight');

            });
        }

    }).swipeRight(function () {
        cid--;
        if (cid < 1) {
            cid = 1;
        } else {
            loadImg(cid, function () {
                function removeAnimation() {
                    wImage.removeClass("animated bounceInLeft");
//                    domImage.removeEventListener('webkitAnimationEnd',function(){});
                }

                domImage.addEventListener("webkitAnimationEnd", removeAnimation, false);
                wImage.addClass('animated bounceInLeft');

            });
        }
    });
</script>
</body>
</html>